#!/bin/bash

# Arquivos
OUTPUT_FILE="proxies_funcionais.txt"
MASSCAN_OUTPUT="masscan_output.txt"
LOG_FILE="scan_log.txt"
WHOIS_CACHE="whois_cache.txt"
RESUME_FILE="resume_state.txt"

# Configurações padrão
PORTS="80,8080,443"
TIMEOUT=3
MAX_PROCESSES=100
MASSCAN_RATE=100000
IP_RANGE="100.0.0.0-200.99.99.99"
CUSTOM_HEADERS=""
CUSTOM_METHOD="GET"
CUSTOM_URL="http://httpbin.org/get"
FILTER_OPERATORS="yes"

# Ranges de operadoras (exemplo, atualizar via WHOIS)
OPERATORS=(
    "Vivo:177.104.0.0/14,187.0.0.0/12"
    "TIM:186.192.0.0/16,189.0.0.0/12"
    "Claro:177.0.0.0/12,191.248.0.0/14"
)

# Obtém IP local
LOCAL_IP=$(ip addr show | grep -oP '(?<=inet\s)\d+\.\d+\.\d+\.\d+' | grep -v '127.0.0.1' | head -n 1)

# Função para monitoramento de CPU e memória
monitor_system() {
    if command -v mpstat >/dev/null; then
        cpu_usage=$(mpstat 1 1 | awk '/Average/ {print 100 - $NF}')
        mem_usage=$(free -m | awk '/Mem:/ {print $3/$2 * 100}')
        echo "Uso de CPU: ${cpu_usage}% | Memória: ${mem_usage}%"
    else
        echo "Monitoramento indisponível (instale sysstat)"
    fi
}

# Função para verificar operadora
check_operator() {
    local ip=$1
    # Verifica cache
    if grep -q "^$ip:" "$WHOIS_CACHE"; then
        grep "^$ip:" "$WHOIS_CACHE" | cut -d: -f2
        return
    fi

    # Verifica ranges conhecidos
    for op in "${OPERATORS[@]}"; do
        name=$(echo "$op" | cut -d: -f1)
        ranges=$(echo "$op" | cut -d: -f2 | tr ',' ' ')
        for range in $ranges; do
            if ipcalc -r "$ip" "$range" | grep -q "is in"; then
                echo "$name" | tee -a "$WHOIS_CACHE"
                return
            fi
        done
    done

    # Usa whois se não encontrar
    whois_result=$(whois "$ip" | grep -i 'Vivo\|TIM\|Claro' | head -n 1 | awk '{print $NF}')
    echo "${whois_result:-Desconhecida}" | tee -a "$WHOIS_CACHE"
}

# Função para testar um proxy
test_proxy() {
    local ip=$1
    local port=$2

    # Pré-verificação com nc
    nc -z -w 1 "$ip" "$port" >/dev/null 2>&1 || return

    # Testa GET
    response=$(curl -s -o /dev/null -w "%{http_code}" --proxy "http://$ip:$port" \
        --connect-timeout "$TIMEOUT" -X "$CUSTOM_METHOD" $CUSTOM_HEADERS "$CUSTOM_URL" 2>/dev/null)
    if [ "$response" = "200" ]; then
        operator=$(check_operator "$ip")
        if [ "$FILTER_OPERATORS" = "yes" ] && [ "$operator" = "Desconhecida" ]; then
            return
        fi
        echo "$ip:$port - Status 200 OK ($operator)" | tee -a "$LOG_FILE"
        echo "{\"ip\":\"$ip\",\"port\":$port,\"status\":200,\"operator\":\"$operator\"}" >> "$OUTPUT_FILE"
        return
    fi

    # Testa CONNECT
    response=$(curl -s -o /dev/null -w "%{http_code}" --proxy "http://$ip:$port" \
        --connect-timeout "$TIMEOUT" -X CONNECT httpbin.org:80 2>/dev/null)
    if [ "$response" = "101" ]; then
        operator=$(check_operator "$ip")
        if [ "$FILTER_OPERATORS" = "yes" ] && [ "$operator" = "Desconhecida" ]; then
            return
        fi
        echo "$ip:$port - Status 101 Switching Protocols ($operator)" | tee -a "$LOG_FILE"
        echo "{\"ip\":\"$ip\",\"port\":$port,\"status\":101,\"operator\":\"$operator\"}" >> "$OUTPUT_FILE"
        return
    fi
}

# Função para executar varredura
run_scan() {
    echo "Iniciando varredura ($IP_RANGE, portas: $PORTS, rate: $MASSCAN_RATE)..." | tee -a "$LOG_FILE"
    sudo masscan "$IP_RANGE" -p"$PORTS" --rate="$MASSCAN_RATE" --output-format list \
        --output-filename "$MASSCAN_OUTPUT" --resume "$RESUME_FILE" | tee -a "$LOG_FILE"

    if [ ! -s "$MASSCAN_OUTPUT" ]; then
        echo "Nenhuma porta aberta encontrada!" | tee -a "$LOG_FILE"
        return 1
    fi

    echo "Testando proxies com xargs..." | tee -a "$LOG_FILE"
    cat "$MASSCAN_OUTPUT" | grep -oP '\d+\.\d+\.\d+\.\d+.*\d+' | \
        xargs -n 2 -P "$MAX_PROCESSES" bash -c 'test_proxy "$0" "$1"' 2>/dev/null

    # Compacta saída
    if [ -s "$OUTPUT_FILE" ]; then
        gzip -f "$OUTPUT_FILE"
        echo "Resultados compactados em $OUTPUT_FILE.gz" | tee -a "$LOG_FILE"
    fi

    echo "Varredura concluída! Veja $OUTPUT_FILE.gz e $LOG_FILE" | tee -a "$LOG_FILE"
}

# Menu interativo
show_menu() {
    clear
    echo "====================================="
    monitor_system
    echo "====================================="
    echo "Turbo Proxy Scanner"
    echo "====================================="
    echo "1. Intervalo de IPs ($IP_RANGE)"
    echo "2. Portas ($PORTS)"
    echo "3. Taxa do masscan ($MASSCAN_RATE)"
    echo "4. Processos simultâneos ($MAX_PROCESSES)"
    echo "5. Timeout ($TIMEOUT)"
    echo "6. Payload personalizada"
    echo "7. Filtrar operadoras ($FILTER_OPERATORS)"
    echo "8. Iniciar varredura"
    echo "9. Sair"
    echo "====================================="
    echo -n "Opção: "
    read option
}

# Loop do menu
> "$LOG_FILE"
> "$WHOIS_CACHE"
while true; do
    show_menu
    case $option in
        1)
            echo -n "Novo intervalo (ex.: 100.0.0.0-200.99.99.99): "
            read IP_RANGE
            ;;
        2)
            echo -n "Novas portas (ex.: 80,8080,443): "
            read PORTS
            ;;
        3)
            echo -n "Taxa do masscan (pacotes/seg): "
            read MASSCAN_RATE
            ;;
        4)
            echo -n "Processos simultâneos: "
            read MAX_PROCESSES
            ;;
        5)
            echo -n "Timeout (segundos): "
            read TIMEOUT
            ;;
        6)
            echo "Payload personalizada"
            echo -n "Método HTTP (ex.: GET, CONNECT): "
            read CUSTOM_METHOD
            echo -n "URL de teste (ex.: http://httpbin.org/get): "
            read CUSTOM_URL
            echo -n "Headers (ex.: -H 'Custom: value'): "
            read CUSTOM_HEADERS
            ;;
        7)
            echo -n "Filtrar operadoras (yes/no): "
            read FILTER_OPERATORS
            ;;
        8)
            run_scan
            echo "Pressione Enter para continuar..."
            read
            ;;
        9)
            echo "Saindo..."
            exit 0
            ;;
        *)
            echo "Opção inválida!" | tee -a "$LOG_FILE"
            sleep 1
            ;;
    esac
done