#!/bin/bash
clear

# Função para instalar pacotes, caso não estejam instalados
install_package() {
    package=$1
    dpkg -l | grep -qw $package || apt-get install $package -y
}

# Instalando pacotes essenciais
install_package "lolcat"
install_package "figlet"
install_package "curl"
install_package "git"
install_package "boxes"

# Verificando se o script está sendo executado como root
cd $HOME
[[ "$(whoami)" != "root" ]] && {
    echo -e "\033[1;33m[\033[1;31mErro\033[1;33m] \033[1;37m- \033[1;33mvocê precisa executar como root\033[0m"
    rm $HOME/Plus >/dev/null 2>&1
    exit 0
}

# Definindo variáveis com formatação segura
_lnk=$(echo 'z1:y#x.5s0ul&p4hs$s.0a72d*n-e!v89e032:3r' | sed -e 's/[^a-z.]//ig' | rev)
_Ink=$(echo '/3×u3#s87r/l32o4×c1a×l1/83×l24×i0b×' | sed -e 's/[^a-z/]//ig')
_1nk=$(echo '/3×u3#s×87r/83×l2×4×i0b×' | sed -e 's/[^a-z/]//ig')

# Função de barra de progresso
fun_bar() {
    comando[0]="$1"
    comando[1]="$2"
    (
        [[ -e $HOME/fim ]] && rm $HOME/fim
        ${comando[0]} -y >/dev/null 2>&1
        ${comando[1]} -y >/dev/null 2>&1
        touch $HOME/fim
    ) >/dev/null 2>&1 &
    tput civis
    echo -ne "\033[1;31m❪\033[1;33mAGUARDE \033[1;37m> \033[1;32m|"
    while true; do
        for ((i = 0; i < 18; i++)); do
            echo -ne "\033[1;32m█"
            sleep 0.1s
        done
        [[ -e $HOME/fim ]] && rm $HOME/fim && break
        echo -e "\033[1;32m|"
        sleep 1s
        tput cuu1
        tput dl1
        echo -ne "\033[1;31m❪\033[1;33mAGUARDE \033[1;37m> \033[1;32m|"
    done
    echo -e "\033[1;33m]\033[1;37m -\033[1;32m OK !\033[1;37m"
    tput cnorm
}

# Função de verificação de chave
function verif_key() {
    local valid_key="1234567890abcdef"  # Defina uma chave válida
    local user_key=$(cat $_Ink/list)

    if [[ "$user_key" != "$valid_key" ]]; then
        echo -e "\n\033[1;31mKEY INVÁLIDA!\033[0m"
        rm -rf $HOME/Plus >/dev/null 2>&1
        exit 1
    fi
}

# Função de otimização do Python
otimize_python() {
    apt-get install python -y >/dev/null 2>&1
    apt-get install python2 -y >/dev/null 2>&1
    apt-get install python3.6 -y >/dev/null 2>&1
    apt-get install python3.7 -y >/dev/null 2>&1
    apt-get install python3.8 -y >/dev/null 2>&1
    apt-get install python3.9 -y >/dev/null 2>&1
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.6 1 >/dev/null 2>&1
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.7 2 >/dev/null 2>&1
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.8 3 >/dev/null 2>&1
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.9 4 >/dev/null 2>&1
    apt install python3-pip -y
    apt install socat -y
    update-alternatives --set python3 /usr/bin/python3.6
}

# Mostrar banner inicial
figlet "SSH-PLUS" | lolcat
echo "SCRIPT EM DESENVOLVIMENTO !!"
echo -e "\033[01;31m━═━═━═━═━═━═━═━━═━═━═━═━═━═━═━═━━═━═━═━═━═━━═━═━═━═━━═━═━═━═━═━═━═━━\033[0m"
echo ""
echo -e "                       \033[05;31mSISTEMAS \033[05;33mOPERACIONAIS\033[0m"
echo ""
echo -e "\033[1;31m• \033[1;33mUBUNTU 18 x64\033[0m 🐧"
echo -e "\033[1;31m• \033[1;33mUBUNTU 20 x64\033[0m 🐧"
echo -e "\033[1;31m• \033[1;33mDEBIAN  9 x64\033[0m 🐧"
echo -e "\033[1;31m• \033[1;33mDEBIAN 10 x64\033[0m 🐧"
echo -e "\033[1;31m• \033[1;33mDEBIAN 11 x64\033[0m 🐧"
echo -e "\033[1;31m \033[1;33m\033[0m"
echo -e "\033[1;31m• \033[1;33mUSE UBUNTU 18 x64 PARA UMA MELHOR EXPERIÊNCIA\033[0m"
echo -e "\033[1;31m• \033[1;33mUSE UBUNTU 18 x64 PARA (V2RAY) EVITEM OUTROS SISTEMAS\033[0m"
echo -e "\033[01;31m━═━═━═━═━═━═━═━━═━═━═━═━═━═━═━═━━═━═━═━═━═━━═━═━═━═━━═━═━═━═━═━═━═━━\033[0m"

# Verificando e baixando lista de chaves
echo -e "\n\033[1;36mVERIFICANDO LINK... \033[0m" 
rm $_Ink/list > /dev/null 2>&1
wget -P $_Ink https://raw.githubusercontent.com/BGXSJYRABJE/hdisbsi/main/Install/list >/dev/null 2>&1
verif_key

sleep 3s

# Criando arquivos e diretórios necessários
echo "/bin/menu" >/bin/h && chmod +x /bin/h >/dev/null 2>&1
rm versao* >/dev/null 2>&1
wget https://raw.githubusercontent.com/upalfadate/hdisbsi/main/Install/versao >/dev/null 2>&1
rm v2raymanager >/dev/null 2>&1
wget https://raw.githubusercontent.com/upalfadate/hdisbsi/main/Modulos/v2raymanager >/dev/null 2>&1
wget https://raw.githubusercontent.com/upalfadate/hdisbsi/main/Modulos/botteste.sh >/dev/null 2>&1
chmod 777 v2raymanager >/dev/null 2>&1
chmod 777 botteste.sh >/dev/null 2>&1
mkdir $HOME/BOT >/dev/null 2>&1
cd $HOME/BOT
wget https://raw.githubusercontent.com/upalfadate/hdisbsi/main/Modulos/ShellBot.sh >/dev/null 2>&1
chmod 777 ShellBot.sh >/dev/null 2>&1
cd >/dev/null 2>&1
chmod 777 licence >/dev/null 2>&1
mkdir /etc/rec >/dev/null 2>&1
cd /etc/rec
wget https://raw.githubusercontent.com/upalfadate/hdisbsi/main/Modulos/licence >/dev/null 2>&1
chmod 777 licence >/dev/null 2>&1
cd >/dev/null 2>&1

echo -e "\n\033[1;32mKEY VALIDA!\033[1;32m"
sleep 1s
echo ""

# Verificando e criando o script do painel
echo -e "\n\033[1;33mLink Configurado...\033[0m"
echo -e "\n\033[1;36mIniciando... \033[0m"
