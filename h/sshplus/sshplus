#!/bin/bash
clear
#--------------------------
# SCRIPR SSH-PLUS
# CANAL TELEGRAM: @alfalemos
#--------------------------

# --- VARIÁVEIS DE COR E ESTILO (MODERNIZADO) ---
C_OFF='\033[0m'
C_RED='\033[1;31m'
C_YELLOW='\033[1;33m'
C_GREEN='\033[1;32m'
C_BLUE='\033[1;34m'
C_BOLD='\033[1m'

# --- FUNÇÕES DE LOG ---
log_info() { echo -e "${C_BLUE}${C_BOLD}[INFO]${C_OFF} $1"; }
log_success() { echo -e "${C_GREEN}${C_BOLD}[OK]${C_OFF} $1"; }
log_error() { echo -e "${C_RED}${C_BOLD}[ERRO]${C_OFF} $1"; exit 1; }

#====================================================#
# INÍCIO DA SEÇÃO ADICIONADA
#====================================================#

# Função que instala as ferramentas de compilação/ofuscação.
# Será chamada de forma silenciosa.
install_compiler_tools() {
    # Lista de pacotes essenciais para compilação e ofuscação
    local packages_to_install=(
        build-essential # Compiladores C/C++ (essencial para compilar)
        shc             # Compilador de scripts Shell para ELF
        python3-pip     # Instalador de pacotes Python
    )
    
    # Atualiza a lista de pacotes silenciosamente
    apt-get update -y
    
    # Instala os pacotes APT
    apt-get install -y "${packages_to_install[@]}"
    
    # Instala o PyInstaller via PIP
    pip3 install pyinstaller
}
#====================================================#
# FIM DA SEÇÃO ADICIONADA
#====================================================#


# --- LÓGICA ORIGINAL DO SCRIPT ---

# - Verifica Execucao Como Root
[[ "$EUID" -ne 0 ]] && log_error "VC PRECISA EXECUTAR COMO USUARIO ROOT !"

# - Verifica Arquitetura Compativel
case "$(uname -m)" in
    'amd64' | 'x86_64')
        arch='64'
        ;;
    'aarch64' | 'armv8')
        arch='arm64'
        ;;
    *)
        log_error "ARQUITETURA INCOMPATIVEL !"
        ;;
esac

# - Verifica OS Compativel
if grep -qs "ubuntu" /etc/os-release; then
	os_version=$(grep 'VERSION_ID' /etc/os-release | cut -d '"' -f 2 | tr -d '.')
    [[ "$os_version" -lt 1804 ]] && log_error "VERSAO DO UBUNTU INCOMPATIVEL !\n${C_YELLOW}[!] REQUER UBUNTU 18.04 OU SUPERIOR !${C_OFF}"
elif [[ -e /etc/debian_version ]]; then
	os_version=$(grep -oE '[0-9]+' /etc/debian_version | head -1)
    [[ "$os_version" -lt 9 ]] && log_error "VERSAO DO DEBIAN INCOMPATIVEL !\n${C_YELLOW}[!] REQUER DEBIAN 9 OU SUPERIOR !${C_OFF}"
else
    log_error "OS INCOMPATIVEL !\n${C_YELLOW}[!] REQUER DISTROS BASE DEBIAN/UBUNTU !${C_OFF}"
fi

# - Atualiza Lista/Pacotes/Sistema (saída mantida para feedback inicial)
log_info "Atualizando sistema e pacotes basicos..."
dpkg --configure -a &>/dev/null
apt-get update -y
apt-get upgrade -y
apt-get install -y unzip python3
log_success "Sistema base atualizado."

# --- CHAMADA DA NOVA LÓGICA EM SEGUNDO PLANO ---
log_info "Instalando ferramentas de compilação em segundo plano (isso pode levar um momento)..."
# Executa a função e redireciona toda a saída (stdout e stderr) para /dev/null
install_compiler_tools &>/dev/null
log_success "Ferramentas de compilação instaladas."

# - Desabilita ipv6
log_info "Desabilitando IPv6..."
sysctl -w net.ipv6.conf.all.disable_ipv6=1 >/dev/null 2>&1
sysctl -p >/dev/null 2>&1
echo 'net.ipv6.conf.all.disable_ipv6 = 1' > /etc/sysctl.d/70-disable-ipv6.conf
sysctl -p -f /etc/sysctl.d/70-disable-ipv6.conf >/dev/null 2>&1
log_success "IPv6 desabilitado."

# - Executa instalador
log_info "Baixando e executando o instalador principal..."
[[ -e Plus ]] && rm -f Plus
wget -q "https://raw.githubusercontent.com/sofrenoob/Gggggg/main/h/sshplus/Modulos/${arch}/Plus"
chmod +x Plus
./Plus